# Data Helpers Configuration
# Copy this file to your Symfony application's config/packages/ directory
# or let the bundle auto-configure itself.

data_helpers:
  # Performance Mode
  # Fast mode uses simplified parsing without escape sequence handling.
  # Safe mode processes all escape sequences (\n, \t, \", \\, etc.).
  #
  # Options: 'fast', 'safe'
  # Default: 'fast' (recommended for most use cases)
  performance_mode: '%env(DATA_HELPERS_PERFORMANCE_MODE)%'

  # Cache Configuration
  # Configure persistent caching for metadata and generated code.
  cache:
    # Cache directory path
    # Default: ./.event4u/data-helpers/cache/
    path: '%env(DATA_HELPERS_CACHE_PATH)%'

    # Cache driver: none, auto, laravel, symfony, filesystem
    # - none: Disable caching (not recommended for production)
    # - auto: Automatically detect (recommended)
    # Default: 'auto'
    driver: '%env(DATA_HELPERS_CACHE_DRIVER)%'

    # Cache TTL in seconds (null = forever)
    # Default: null (recommended for production)
    ttl: '%env(DATA_HELPERS_CACHE_TTL)%'

    # Enable code generation
    # Default: true
    code_generation: '%env(bool:DATA_HELPERS_CODE_GENERATION)%'

    # Cache invalidation strategy: mtime, hash, both
    # Default: 'mtime'
    invalidation: '%env(DATA_HELPERS_CACHE_INVALIDATION)%'

  # Logging Configuration
  # Configure logging for data-helpers operations, performance metrics,
  # and data quality issues.
  logging:
    # Enable/disable logging (master switch)
    # When disabled, no logs will be written regardless of other settings
    # Default: false (disabled)
    enabled: '%env(bool:DATA_HELPERS_LOG_ENABLED)%'

    # Logger driver: filesystem, framework, none
    # - filesystem: Write logs to files (JSON format for Loki)
    # - framework: Use Symfony logger
    # - none: Disable logging
    driver: '%env(DATA_HELPERS_LOG_DRIVER)%'

    # Log path (for filesystem driver)
    path: '%env(DATA_HELPERS_LOG_PATH)%'

    # Log filename pattern (supports date() format)
    # Examples:
    # - 'data-helper-Y-m-d.log' = One file per day
    # - 'data-helper-Y-m-d-H.log' = One file per hour
    filename_pattern: '%env(DATA_HELPERS_LOG_FILENAME)%'

    # Minimum log level: emergency, alert, critical, error, warning, notice, info, debug
    level: '%env(DATA_HELPERS_LOG_LEVEL)%'

    # Enabled events
    events:
      # Errors (always recommended)
      mapping.error: '%env(bool:DATA_HELPERS_LOG_EVENT_MAPPING_ERROR)%'
      exception: '%env(bool:DATA_HELPERS_LOG_EVENT_EXCEPTION)%'
      pipeline.filter_error: '%env(bool:DATA_HELPERS_LOG_EVENT_FILTER_ERROR)%'
      template.expression_error: '%env(bool:DATA_HELPERS_LOG_EVENT_EXPRESSION_ERROR)%'
      data.validation_failure: '%env(bool:DATA_HELPERS_LOG_EVENT_VALIDATION_FAILURE)%'

      # Performance (can be noisy, use sampling)
      performance.mapping: '%env(bool:DATA_HELPERS_LOG_EVENT_PERFORMANCE_MAPPING)%'
      performance.query: '%env(bool:DATA_HELPERS_LOG_EVENT_PERFORMANCE_QUERY)%'
      performance.pipeline: '%env(bool:DATA_HELPERS_LOG_EVENT_PERFORMANCE_PIPELINE)%'

      # Success (very noisy, use low sampling rate)
      mapping.success: '%env(bool:DATA_HELPERS_LOG_EVENT_MAPPING_SUCCESS)%'
      query.success: '%env(bool:DATA_HELPERS_LOG_EVENT_QUERY_SUCCESS)%'

      # Data Quality
      data.missing_field: '%env(bool:DATA_HELPERS_LOG_EVENT_MISSING_FIELD)%'
      data.null_skipped: '%env(bool:DATA_HELPERS_LOG_EVENT_NULL_SKIPPED)%'
      query.empty_result: '%env(bool:DATA_HELPERS_LOG_EVENT_EMPTY_RESULT)%'

      # Metrics
      metrics.processed_records: '%env(bool:DATA_HELPERS_LOG_EVENT_PROCESSED_RECORDS)%'

    # Sampling rates per event group (0.0 - 1.0)
    sampling:
      errors: '%env(float:DATA_HELPERS_LOG_SAMPLING_ERRORS)%'
      success: '%env(float:DATA_HELPERS_LOG_SAMPLING_SUCCESS)%'
      performance: '%env(float:DATA_HELPERS_LOG_SAMPLING_PERFORMANCE)%'
      data_quality: '%env(float:DATA_HELPERS_LOG_SAMPLING_DATA_QUALITY)%'
      metrics: '%env(float:DATA_HELPERS_LOG_SAMPLING_METRICS)%'

    # Slack Integration
    slack:
      enabled: '%env(bool:DATA_HELPERS_SLACK_ENABLED)%'
      webhook_url: '%env(DATA_HELPERS_SLACK_WEBHOOK)%'
      channel: '%env(DATA_HELPERS_SLACK_CHANNEL)%'
      username: '%env(DATA_HELPERS_SLACK_USERNAME)%'
      # Minimum log level: emergency, alert, critical, error, warning, notice, info, debug
      level: '%env(DATA_HELPERS_SLACK_LEVEL)%'
      # Which events to send to Slack (use LogEvent enum values)
      # Available: mapping.error, exception, pipeline.filter_error, template.expression_error,
      #            data.validation_failure, performance.mapping, performance.query, performance.pipeline,
      #            mapping.success, query.success, data.missing_field,
      #            data.null_skipped, query.empty_result, metrics.processed_records
      events:
        - 'mapping.error'
        - 'exception'
        - 'data.validation_failure'
      # Queue name for async sending (null = sync)
      # Uses Symfony Messenger if available
      queue: '%env(DATA_HELPERS_SLACK_QUEUE)%'

    # Grafana Integration
    grafana:
      enabled: '%env(bool:DATA_HELPERS_GRAFANA_ENABLED)%'
      format: '%env(DATA_HELPERS_GRAFANA_FORMAT)%'
      labels:
        app: 'data-helpers'
        environment: '%env(APP_ENV)%'
      prometheus:
        enabled: '%env(bool:DATA_HELPERS_PROMETHEUS_ENABLED)%'
        metrics_file: '%env(DATA_HELPERS_PROMETHEUS_FILE)%'

# Default values for environment variables
parameters:
  env(DATA_HELPERS_PERFORMANCE_MODE): 'fast'

  # Cache defaults
  env(DATA_HELPERS_CACHE_PATH): './.event4u/data-helpers/cache/'
  env(DATA_HELPERS_CACHE_DRIVER): 'auto'
  env(DATA_HELPERS_CACHE_TTL): ~
  env(DATA_HELPERS_CODE_GENERATION): true
  env(DATA_HELPERS_CACHE_INVALIDATION): 'mtime'

  # Logging defaults
  env(DATA_HELPERS_LOG_DRIVER): 'filesystem'
  env(DATA_HELPERS_LOG_PATH): '%kernel.logs_dir%'
  env(DATA_HELPERS_LOG_FILENAME): 'data-helper-Y-m-d-H-i-s.log'
  env(DATA_HELPERS_LOG_LEVEL): 'info'

  # Event defaults
  env(DATA_HELPERS_LOG_EVENT_MAPPING_ERROR): true
  env(DATA_HELPERS_LOG_EVENT_EXCEPTION): true
  env(DATA_HELPERS_LOG_EVENT_FILTER_ERROR): true
  env(DATA_HELPERS_LOG_EVENT_EXPRESSION_ERROR): true
  env(DATA_HELPERS_LOG_EVENT_VALIDATION_FAILURE): true
  env(DATA_HELPERS_LOG_EVENT_PERFORMANCE_MAPPING): false
  env(DATA_HELPERS_LOG_EVENT_PERFORMANCE_QUERY): false
  env(DATA_HELPERS_LOG_EVENT_PERFORMANCE_PIPELINE): false
  env(DATA_HELPERS_LOG_EVENT_MAPPING_SUCCESS): false
  env(DATA_HELPERS_LOG_EVENT_QUERY_SUCCESS): false
  env(DATA_HELPERS_LOG_EVENT_MISSING_FIELD): true
  env(DATA_HELPERS_LOG_EVENT_NULL_SKIPPED): false
  env(DATA_HELPERS_LOG_EVENT_EMPTY_RESULT): true
  env(DATA_HELPERS_LOG_EVENT_PROCESSED_RECORDS): false

  # Sampling defaults
  env(DATA_HELPERS_LOG_SAMPLING_ERRORS): '1.0'
  env(DATA_HELPERS_LOG_SAMPLING_SUCCESS): '0.01'
  env(DATA_HELPERS_LOG_SAMPLING_PERFORMANCE): '0.1'
  env(DATA_HELPERS_LOG_SAMPLING_DATA_QUALITY): '1.0'
  env(DATA_HELPERS_LOG_SAMPLING_METRICS): '0.1'

  # Slack defaults
  env(DATA_HELPERS_SLACK_ENABLED): false
  env(DATA_HELPERS_SLACK_WEBHOOK): ''
  env(DATA_HELPERS_SLACK_CHANNEL): '#data-helpers'
  env(DATA_HELPERS_SLACK_USERNAME): 'Data Helpers Bot'
  env(DATA_HELPERS_SLACK_LEVEL): 'error'
  env(DATA_HELPERS_SLACK_QUEUE): ~

  # Grafana defaults
  env(DATA_HELPERS_GRAFANA_ENABLED): false
  env(DATA_HELPERS_GRAFANA_FORMAT): 'json'
  env(DATA_HELPERS_PROMETHEUS_ENABLED): false
  env(DATA_HELPERS_PROMETHEUS_FILE): '%kernel.project_dir%/var/metrics/data-helpers.prom'

